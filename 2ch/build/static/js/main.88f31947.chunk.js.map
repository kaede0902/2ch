{"version":3,"sources":["Config/config.js","components/Show.jsx","components/Add.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["firestore","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","ref","collection","Show","useCollectionData","idField","values","loading","error","message","num","Row","Col","map","value","key","id","created_at","toDate","toString","content","Add","useState","setContent","pending","setPending","add","a","FieldValue","serverTimestamp","now","onChange","e","target","onClick","Header","className","md","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qRAcaA,G,MAAYC,IAASC,cAXnB,CACbC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBCNjBC,QAAQC,IAAIZ,IAAa,GAGzB,IAAMa,EAAMZ,IAASD,YAAYc,WAAW,YAqC7BC,EAnCF,WAAO,IAAD,EACiBC,YAChCH,EAAK,CAACI,QAAS,OAFA,mBACVC,EADU,KACFC,EADE,KACOC,EADP,KAGjB,GAAGD,EACD,OAAO,2CAET,GAAGC,EACD,OAAO,8CAAgBA,EAAMC,UAE/BV,QAAQC,IAAIM,GACZ,IAAII,EAAM,EAEV,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGN,EAAOO,KAAI,SAAAC,GAAK,OACb,yBAAKC,IAAOD,EAAME,MACXN,EADP,mCACmBI,EAAME,GADzB,IAEKF,EAAMG,WACJH,EAAMG,WAAWC,SAASC,WAC3B,UAEN,6BACGL,EAAMM,gB,yBC9BrBrB,QAAQC,IAAIZ,IAAa,GAIzB,IAAMa,EAAMZ,IAASD,YAAYc,WAAW,YAqC7BmB,EAnCH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTF,EADS,KACAG,EADA,OAEcD,oBAAS,GAFvB,mBAETE,EAFS,KAEAC,EAFA,KAIVC,EAAG,uCAAG,sBAAAC,EAAA,6DACVJ,EAAW,IACXE,GAAW,GAFD,kBAKFxB,EAAIyB,IAAI,CACZN,UACAH,WAAY5B,IAASD,UAAUwC,WAAWC,gBAAgBC,QAPpD,uBAWRL,GAAW,GAXH,uEAAH,qDAcT,OACE,6BACE,2BACEX,MAASM,EACTW,SAAU,SAAAC,GAAC,OAAIT,EAAWS,EAAEC,OAAOnB,UAErC,4BACEoB,QAASR,GADX,OAKGF,GAAW,eCvBLW,EAZA,WACb,OACE,kBAACxB,EAAA,EAAD,CAAKyB,UAAU,QACb,kBAACxB,EAAA,EAAD,CAAKyB,GAAI,GAAT,UACA,kBAACzB,EAAA,EAAD,CAAKyB,GAAI,GAAT,YACA,kBAACzB,EAAA,EAAD,CAAKyB,GAAI,GAAT,WACA,kBAACzB,EAAA,EAAD,CAAKyB,GAAI,GAAT,YACA,kBAACzB,EAAA,EAAD,CAAKyB,GAAI,GAAT,cCUSC,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWH,UAAU,IACnB,kBAAC,EAAD,MACE,kBAAC,EAAD,MACF,kBAACzB,EAAA,EAAD,KACE,kBAAC,EAAD,SCFY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACI,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,OAAOC,UAAWX,MAG1CY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLT,QAAQS,MAAMA,EAAMC,c","file":"static/js/main.88f31947.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n  apiKey: \"AIzaSyDmalZJoWLjvCGpUAAGc1E384X0QTfdLJk\",\n  authDomain: \"kaede-0902ch.firebaseapp.com\",\n  databaseURL: \"https://kaede-0902ch.firebaseio.com\",\n  projectId: \"kaede-0902ch\",\n  storageBucket: \"kaede-0902ch.appspot.com\",\n  messagingSenderId: \"351430009448\",\n  appId: \"1:351430009448:web:202e09657e76268ef391dd\",\n  measurementId: \"G-4Z0L2R5D96\"\n};\n\nexport const firestore = firebase.initializeApp(config); \n","import React from 'react';\nimport { Row, Col,} from 'react-bootstrap';\nimport firebase from 'firebase/app';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport {firestore} from '../Config/config';\nconsole.log(firestore && false);\n\n\nconst ref = firebase.firestore().collection('writings');\n\nconst Show = () => {\n  const [values, loading, error,] = useCollectionData(\n    ref, {idField: 'id'});\n  if(loading) {\n    return <div>Loading...</div>\n  }\n  if(error) {\n    return <div>{`Error: ${error.message}`}</div>\n  }\n  console.log(values);\n  let num = 0;\n  \n  return (\n    <Row>\n      <Col>\n        {values.map(value => (\n            <div key = {value.id}>\n                {++num}:名無しさん:{value.id}:\n                {value.created_at ? \n                  (value.created_at.toDate().toString()) : \n                  \"NO DATE\"\n                }\n            <div>\n              {value.content}\n            </div>\n            </div>\n        ))}\n      </Col>\n    </Row>\n  )\n}\n\n\n\n\nexport default Show;\n","import React, { useState } from \"react\";\nimport firebase from 'firebase/app';\nimport { firestore } from '../Config/config';\nconsole.log(firestore && false);\n\n\n\nconst ref = firebase.firestore().collection('writings');\n\nconst Add = () => {\n  const [content, setContent] = useState('');\n  const [pending, setPending] = useState(false);\n\n  const add = async () => {\n    setContent('');\n    setPending(true);\n\n    try {\n      await ref.add({\n        content,\n        created_at: firebase.firestore.FieldValue.serverTimestamp.now(),\n      });\n    }\n    finally {\n      setPending(false);\n    }\n  }\n  return (\n    <div>\n      <input \n        value = {content} \n        onChange={e => setContent(e.target.value)}\n      />\n      <button\n        onClick={add}\n      >\n        Add\n      </button>\n        {pending && 'Pending...'}\n    </div>\n  )\n};\n\n\nexport default Add;\n","import React from 'react';\nimport {Col, Row,} from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <Row className='my-3'>\n      <Col md={2}>0902ch</Col>\n      <Col md={2}>SHOW ALL</Col>\n      <Col md={2}>SHOW 1~</Col>\n      <Col md={2}>Latest50</Col>\n      <Col md={4}>Latest50</Col>\n    </Row>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col,} from 'react-bootstrap';\nimport Show from './components/Show';\nimport Add from './components/Add';\nimport Header from './components/Header'\n\n\nfunction App() {\n  return (\n    <Container className=''>\n      <Header />\n        <Show/ >\n      <Row>\n        <Add />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n      <div>\n        <Route exact path='/' component={App} />\n        <Route exact path='/app' component={App} />\n      </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}